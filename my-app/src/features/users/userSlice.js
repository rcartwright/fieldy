import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
//import { fetchUsers } from './userAPI';

const initialState =
{
  status: 'idle',
  hasErrors: false,
  users: [],
}
    //     {
    //         email: "some@email.com",
    //         id: "118d7017-93c1-4517-b014-81ca9c1416e6",
    //         is_active: true
    //     },
    //     {
    //         email: "some12345@email.com",
    //         id: "118d7017-93c1-4517-b014-81ca9c1416e6",
    //         is_active: true
    //     },
    // ]

export const fetchUsers = createAsyncThunk(
  'users/fetchUsers',
  async () => {
    const url = `http://192.168.99.100:4001/api/users`;
   // const url = `http://localhost:4001/api/users`;

    const yoyo = await fetch(url, {
              method: 'GET',
              credentials: 'same-origin'
          })
      .then(response => response.json())
      .then((responseJson) => {
        console.log('responseJson', responseJson)
        return responseJson;
      })
      .catch((error) => {
        console.error('getMany error: ', error);
        return [];
      });

    return yoyo;
  }
);

export const userSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getUsers: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
        state.users = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: {
  //   [fetchUserById.fulfilled]: (state, action) => {}
  // }
  extraReducers: (builder) => {
    return builder
      .addCase(fetchUsers.pending, (state) => {
        state.status = 'loading';
        state.hasErrors = false;
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.status = 'success';
        state.hasErrors = false;
        state.users = action.payload.data;
      })
      .addCase(fetchUsers.rejected), (state, action) => {
        state.status = 'error';
        state.hasErrors = true;
        state.users = [];
      }
  },
})


export const getUsers = (state) => state.users;

//export const { fetchUsers } = userSlice.actions;

export const selectUsers = (state) => state.users;

export default userSlice.reducer;