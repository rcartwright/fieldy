import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
//import { fetchUsers } from './userAPI';

const initialState = [
        {
            email: "some@email.com",
            id: "118d7017-93c1-4517-b014-81ca9c1416e6",
            is_active: true
        },
        {
            email: "some12345@email.com",
            id: "118d7017-93c1-4517-b014-81ca9c1416e6",
            is_active: true
        },
    ]

export const userSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getUsers: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
        state.users = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsersAPI.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUsersAPI.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
})

export const fetchUsersAPI = createAsyncThunk(
  'users/fetchUsers',
  async () => {
    const url = `http://192.168.99.100:4001/api/users`;

    return fetch(url, {
              method: 'GET',
              credentials: 'same-origin'
          })
      .then(response => response.json())
      .then((responseJson) => {
        console.log('responseJson', responseJson)
        return responseJson;
      })
      .catch((error) => {
        console.error('getMany error: ', error);
        return [];
      });
  }
);

// export function getMany(path, functionName) {
//   //console.log(chalk.blue('thePath', path));
//   if (!path) {
//     throw new Error('no path in getMany function', functionName);
//   }
//   checkValidUrl(path, functionName);

//   const url = `${SERVER_URL}${path}`;

//   return fetch(url, {
//             method: 'GET',
//             credentials: 'same-origin'
//         })
//     .then(response => response.json())
//     .then((responseJson) => {
//       return responseJson;
//     })
//     .catch((error) => {
//       console.error('getMany error: ', error);
//       return [];
//     });
// }

export const { fetchUsers } = userSlice.actions;

export const selectUsers = (state) => state.users;

export default userSlice.reducer;